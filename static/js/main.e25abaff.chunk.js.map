{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","Scroll","style","overflowY","border","height","children","SearchBox","searchfield","searchChange","type","onChange","placeholder","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OA0BeA,EAvBH,SAACC,GAAW,IACbC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACxB,OAEA,sBAAKC,UAAY,sDAAjB,UACI,qBAAKC,IAAI,GAAGC,IAAG,+BAA2BH,EAA3B,cACf,gCACI,6BAAKF,IACL,4BAAIC,WCeGK,EAvBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACnC,OAAS,cAAC,EAAD,CAEDT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,OAHZU,MAOjB,OAEI,gCACKH,EADL,QCFOI,EAXA,SAACb,GACZ,OACI,qBAAKc,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,SAApE,SACKjB,EAAMkB,YCaJC,EAfG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aACjC,OACI,qBAAKjB,UAAU,OAAf,SACI,uBAAOA,UAAU,mCACjBkB,KAAK,SACLC,SAAWF,EACXG,YAAY,qBCgELC,G,wDA7DX,aAAc,IAAD,8BACT,gBAoBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SApBzC,EAAKC,MAAQ,CACTvB,OAAQ,GACRY,YAAa,IAJR,E,gEASO,IAAD,OACfY,MAAM,8CACLC,MAAK,SAAAC,GACH,OAAOA,EAASC,UAElBF,MAAK,SAAAG,GACF,EAAKR,SAAS,CAACpB,OAAQ4B,S,+BAYtB,IAAD,EAC0BC,KAAKN,MAA5BvB,EADH,EACGA,OAAQY,EADX,EACWA,YACTkB,EAAiBD,KAAKN,MAAMvB,OAAO+B,QAAO,SAAAC,GAC5C,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAStB,EAAYqB,kBAEzD,OAAKjC,EAAOmC,OAMJ,sBAAKvC,UAAU,KAAf,UACA,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWiB,aAAcgB,KAAKX,iBAC9B,cAAC,EAAD,UACA,cAAC,EAAD,CAAUlB,OAAQ8B,SATf,6C,GAlCDM,IAAMC,YCCTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e25abaff.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card =(props) => {\n    const {name, email, id} = props;\nreturn (\n\n<div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n    <img alt='' src= {`https://robohash.org/${id}?200x200`}/>\n    <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n\n\n    </div>\n\n\n\n\n</div>\n\n\n);\n\n\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) =>{\n    const cardComponent = robots.map((user,i) =>{\n        return  (<Card \n                key={i} \n                id={robots[i].id} \n                name={robots[i].name} \n                email={robots[i].email} />\n                );\n    })\n\n    return (\n        \n        <div>\n            {cardComponent};\n      \n        </div>\n\n\n    );\n\n\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid-black', height:'500px'}}>\n            {props.children}\n        </div>\n\n\n    );\n\n};\n\nexport default Scroll;","import React from 'react';\n\n\nconst SearchBox = ({searchfield, searchChange}) => {\nreturn (\n    <div className='pa2 '>\n        <input className='pa3 ba b--green bg-lightest-blue' \n        type='search' \n        onChange= {searchChange}\n        placeholder='search robots' />\n        \n    </div>\n\n\n);\n\n}\n\nexport default SearchBox;","import React, {Component} from 'react';\nimport Cardlist from '../components/CardList';\nimport  Scroll  from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\n\n\n\n\n\n\nclass App extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => {\n           return response.json();\n        })\n        .then(users => {\n            this.setState({robots: users})\n        });\n\n        \n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    \n    }\n\n\n    render(){\n        const {robots, searchfield} = this.state;\n        const filteredRobots = this.state.robots.filter(robot=>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        if (!robots.length){\n            return <h1>Loading</h1>\n        }\n        else{\n\n            return(\n                <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                <Cardlist robots={filteredRobots}/>\n\n                </Scroll>\n               \n            \n                </div>\n               \n            \n            \n            );\n        }\n\n\n     \n\n\n    }}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}